#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "tabledeclaration.h"

int taille_tdecla=500;

void initTabedelcaration(){
  int i=0;
  for(i=0;i<4;i++){
    tableDeclaration[i].nature = TYPE_BASE;
    tableDeclaration[i].region = 0;
    tableDeclaration[i].description = -1;
    tableDeclaration[i].execution = 1;
  }

  for(i=4;i<MAX_DECLA;i++){
    tableDeclaration[i].nature = -1;
    tableDeclaration[i].suivant = -1;
    tableDeclaration[i].region = 0;
    tableDeclaration[i].description = -1;
    tableDeclaration[i].execution = -1;
  }
}


/*
int inserer_decl(int i_lex,int nature,int region, int description){
  int i=0;
  if (tableDeclaration[i_lex].nature==-1) {
    tableDeclaration[i_lex].nature = nature;
    tableDeclaration[i_lex].suivant = -1;
    tableDeclaration[i_lex].region = region;
    tableDeclaration[i_lex].description = description;
    tableDeclaration[i_lex].execution = -1;
  }
  else{
    while(tableDeclaration[i_lex].suivant!=-1){
      if (tableDeclaration[i_lex].region == region){
        printf("Erreur, déclaration déjà existante");
        return(-1);
      }
      i=tableDeclaration[i_lex].suivant;
    }
    tableDeclaration[i].suivant=taille_tdecla;
    i=taille_tdecla;
    tableDeclaration[i].nature = nature;
    tableDeclaration[i].suivant = -1;
    tableDeclaration[i].region = region;
    tableDeclaration[i].description = description;
    tableDeclaration[i].execution = -1;
    taille_tdecla++;
    return 0;
  }
}
*/

int inserer_var(int i_lex,int nature,int region, int type, int deplacement){
  int i=0;
  int description = 0;
  if(type != 1 || type != 1 || type != 1 || type != 1){
  if (tableDeclaration[i_lex].nature==-1) {
    tableDeclaration[i_lex].nature = nature;
    tableDeclaration[i_lex].suivant = -1;
    tableDeclaration[i_lex].region = region;
    tableDeclaration[i_lex].description = description;
    tableDeclaration[i_lex].execution = -1;
  }
}
  else{
    while(tableDeclaration[i_lex].suivant!=-1){
      if (tableDeclaration[i_lex].region == region){
        printf("Erreur, déclaration déjà existante");
        return(-1);
      }
      i=tableDeclaration[i_lex].suivant;
    }
    tableDeclaration[i].suivant=taille_tdecla;
    i=taille_tdecla;
    tableDeclaration[i].nature = nature;
    tableDeclaration[i].suivant = -1;
    tableDeclaration[i].region = region;
    tableDeclaration[i].description = description;
    tableDeclaration[i].execution = -1;
    taille_tdecla++;
    return 0;
  }
}

void affichertabdecl(){
  int i;
  printf("| indice | nature | suivant | région | description | execution |\n");
  for(i=0;i<MAX_DECLA;i++){
    if(tableDeclaration[i].nature!=-1){
      printf("| %d ", i);
      switch( tableDeclaration[i].nature ){
      case 1 :
        printf("| TYPE BASE |");
	break;
      case 2 :
        printf("| TYPE STRUCT |");
	break;
      case 3 :
        printf("| TYPE VAR |");
	break;
      case 4 :
        printf("| TYPE PARAM |");
	break;
      case 5 :
        printf("| TYPE TABLE |");
	break;
      case 6 :
        printf("| TYPE PROCEDURE |");
	break;
      case 7 :
        printf("| TYPE FONCTION |");
	break;
      case 8 :
        printf("| TYPE MAIN |");
	break;
      default :
        printf("| TYPE INCONNU |");
      }

      printf(" %d | %d | %d | %d |\n", tableDeclaration[i].suivant, tableDeclaration[i].region, tableDeclaration[i].description, tableDeclaration[i].execution);
    }
  }
}

int main(){
  /*inserer_decl(int i_lex,int nature,int region, int description)*/
  initTabedelcaration();
  inserer_decl(32,1,0,5);
  inserer_decl(33,5,1,10);
  inserer_decl(33,5,2,10);
  affichertabdecl();
  return 0;
}
